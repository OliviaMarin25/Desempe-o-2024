import streamlit as st
import pandas as pd
import plotly.express as px

# Configuraci칩n de la p치gina
st.set_page_config(page_title="Dashboard Desempe침o Piton", page_icon="游늵", layout="wide")
st.title("游늵 Reporte de Desempe침o - Piton")

# ============================
# Carga de datos
# ============================
st.sidebar.header("丘뙖잺 Configuraci칩n de datos")
archivo_subido = st.sidebar.file_uploader("Sube tu archivo CSV (separador ;)", type=["csv"])
ARCHIVO_REPO = "Desempe침o-Piton.csv"

try:
    if archivo_subido is not None:
        df = pd.read_csv(archivo_subido, sep=";", encoding="utf-8", engine="python")
    else:
        df = pd.read_csv(ARCHIVO_REPO, sep=";", encoding="utf-8", engine="python")

    st.success(f"Datos cargados: {df.shape[0]} filas 칑 {df.shape[1]} columnas")

    # ============================
    # KPIs
    # ============================
    st.subheader("游늷 Indicadores Generales")
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Total registros", len(df))
    c2.metric("Direcciones", df["Direcci칩n"].nunique())
    c3.metric("츼reas", df["츼rea"].nunique())
    c4.metric("Categor칤as distintas", df["Categor칤a"].nunique())

    # ============================
    # Funci칩n de an치lisis por grupo
    # ============================
    def analisis_por_grupo(columna, nombre):
        st.subheader(f"游늵 An치lisis por {nombre}")

        resumen = df.groupby(columna)["Categor칤a"].value_counts(normalize=True).mul(100).rename("Porcentaje").reset_index()
        st.markdown("**游늶 Distribuci칩n (%) de Categor칤as**")
        st.dataframe(resumen, use_container_width=True)

        st.markdown("**游늵 Gr치fico de Distribuci칩n**")
        fig = px.bar(
            resumen,
            x=columna, y="Porcentaje", color="Categor칤a", text_auto=".1f",
            barmode="stack", title=f"Distribuci칩n de Categor칤as por {nombre}"
        )
        st.plotly_chart(fig, use_container_width=True)

    # ============================
    # An치lisis por Direcci칩n / 츼rea / Sub-치rea
    # ============================
    analisis_por_grupo("Direcci칩n", "Direcci칩n")
    analisis_por_grupo("츼rea", "츼rea")
    analisis_por_grupo("Sub-치rea", "Sub-치rea")

    # ============================
    # Mejores y peores evaluados
    # ============================
    st.subheader("游끥 Mejores y Peores Evaluados")
    # definimos "mejor" como quienes tienen m치s frecuencia en "CUMPLE" y "ALTO DESEMPE칌O"
    mejores = df[df["Categor칤a"].isin(["CUMPLE", "ALTO DESEMPE칌O"])]
    peores = df[df["Categor칤a"].isin(["CUMPLE PARCIALMENTE", "NO CUMPLE"])]

    st.markdown("**游댛 Evaluados con mejores resultados**")
    st.dataframe(mejores[["Evaluado", "Cargo", "Evaluador", "Categor칤a"]].head(10), use_container_width=True)

    st.markdown("**游댵 Evaluados con peores resultados**")
    st.dataframe(peores[["Evaluado", "Cargo", "Evaluador", "Categor칤a"]].head(10), use_container_width=True)

    # ============================
    # Competencias cr칤ticas
    # ============================
    competencias = [
        "LIDERAZGO MAGNETICO",
