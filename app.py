import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Dashboard Desempe√±o Piton", page_icon="üìä", layout="wide")
st.title("üìä Reporte de Desempe√±o - Piton")

# ============================
# Carga de datos
# ============================
st.sidebar.header("‚öôÔ∏è Configuraci√≥n de datos")

archivo_subido = st.sidebar.file_uploader("Sube tu archivo CSV (separador ;)", type=["csv"])

# Archivo por defecto en el repo
ARCHIVO_REPO = "Desempe√±o-Piton.csv"

try:
    if archivo_subido is not None:
        df = pd.read_csv(archivo_subido, sep=";", encoding="utf-8", engine="python")
        st.sidebar.success("‚úÖ Usando archivo cargado por el usuario")
    else:
        df = pd.read_csv(ARCHIVO_REPO, sep=";", encoding="utf-8", engine="python")
        st.sidebar.info("‚ÑπÔ∏è Usando archivo por defecto del repo")

    st.success(f"Datos cargados: {df.shape[0]} filas √ó {df.shape[1]} columnas")

    # ============================
    # KPIs
    # ============================
    st.subheader("üìå Indicadores Generales")
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Total registros", len(df))
    if "Direcci√≥n" in df.columns:
        c2.metric("Direcciones", df["Direcci√≥n"].nunique())
    if "√Årea" in df.columns:
        c3.metric("√Åreas", df["√Årea"].nunique())
    if "Desempe√±o" in df.columns:
        c4.metric("Promedio Desempe√±o", round(df["Desempe√±o"].mean(), 2))

    # ============================
    # Gr√°ficos comparativos
    # ============================
    if "Direcci√≥n" in df.columns and "Desempe√±o" in df.columns:
        st.subheader("üìä Promedio de Desempe√±o por Direcci√≥n")
        fig_dir = px.bar(
            df.groupby("Direcci√≥n")["Desempe√±o"].mean().reset_index(),
            x="Direcci√≥n", y="Desempe√±o", text_auto=".2f", color="Desempe√±o"
        )
        st.plotly_chart(fig_dir, use_container_width=True)

    if "√Årea" in df.columns and "Desempe√±o" in df.columns:
        st.subheader("üìä Promedio de Desempe√±o por √Årea")
        fig_area = px.bar(
            df.groupby("√Årea")["Desempe√±o"].mean().reset_index(),
            x="√Årea", y="Desempe√±o", text_auto=".2f", color="Desempe√±o"
        )
        st.plotly_chart(fig_area, use_container_width=True)

    if "Sub-√°rea" in df.columns and "Desempe√±o" in df.columns:
        st.subheader("üìä Promedio de Desempe√±o por Sub-√°rea")
        fig_sub = px.bar(
            df.groupby("Sub-√°rea")["Desempe√±o"].mean().reset_index(),
            x="Sub-√°rea", y="Desempe√±o", text_auto=".2f", color="Desempe√±o"
        )
        st.plotly_chart(fig_sub, use_container_width=True)

    # ============================
    # Mejores y peores evaluados
    # ============================
    if "Desempe√±o" in df.columns and "Nombre" in df.columns:
        st.subheader("üèÜ Mejores y Peores Evaluados")

        top5 = df.nlargest(5, "Desempe√±o")[["Nombre", "Cargo", "Evaluador", "Desempe√±o"]]
        low5 = df.nsmallest(5, "Desempe√±o")[["Nombre", "Cargo", "Evaluador", "Desempe√±o"]]

        st.markdown("**üîù Top 5 Mejores Evaluados**")
        st.dataframe(top5, use_container_width=True)

        st.markdown("**üîª Top 5 Peores Evaluados**")
        st.dataframe(low5, use_container_width=True)

    # ============================
    # Competencias cr√≠ticas
    # ============================
    competencias = [
        "LIDERAZGO MAGNETICO",
        "HUMILDAD",
        "VISI√ìN ESTRAT√âGICA",
        "RESOLUTIVIDAD",
        "GENERACI√ìN DE REDES",
        "FORMADOR DE PERSONAS"
    ]

    st.subheader("‚ö†Ô∏è Personas con Competencias en 'Cumple Parcialmente' o 'No Cumple'")
    for comp in competencias:
        if comp in df.columns:
            criticos = df[df[comp].isin(["CUMPLE PARCIALMENTE", "NO CUMPLE"])]
            if not criticos.empty:
                st.markdown(f"### üìå {comp}")
                st.dataframe(criticos[["Nombre", "Cargo", "Evaluador", comp]], use_container_width=True)

except Exception as e:
    st.error(f"‚ùå Error al cargar el archivo: {e}")
